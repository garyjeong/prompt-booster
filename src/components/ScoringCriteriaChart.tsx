import React, { memo, useMemo } from 'react';
import {
  VStack,
  HStack,
  Box,
  Text,
  Progress,
  Tooltip,
  useColorModeValue,
  Flex,
  Badge,
} from '@chakra-ui/react';
import { ScoringCriteria } from '@/types/scoring';
import type { CriterionScore } from '@/types/scoring';

interface ScoringCriteriaChartProps {
  criteriaScores: CriterionScore[];
  showDetails?: boolean;
}

// Í∏∞Ï§ÄÎ≥Ñ ÌïúÍµ≠Ïñ¥ ÎùºÎ≤®Í≥º ÏïÑÏù¥ÏΩò
const CRITERIA_LABELS = {
  [ScoringCriteria.CLARITY]: { 
    label: 'Î™ÖÌôïÏÑ±', 
    icon: 'üîç',
    description: 'ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÏñºÎßàÎÇò Î™ÖÌôïÌïòÍ≥† Ïù¥Ìï¥ÌïòÍ∏∞ Ïâ¨Ïö¥Í∞Ä'
  },
  [ScoringCriteria.SPECIFICITY]: { 
    label: 'Íµ¨Ï≤¥ÏÑ±', 
    icon: 'üéØ',
    description: 'ÏÑ∏Î∂ÄÏ†ÅÏù¥Í≥† Ï†ïÌôïÌïú Ï†ïÎ≥¥Î•º Ìè¨Ìï®ÌïòÎäîÍ∞Ä'
  },
  [ScoringCriteria.STRUCTURE]: { 
    label: 'Íµ¨Ï°∞Ìôî', 
    icon: 'üèóÔ∏è',
    description: 'ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú Ïûò Íµ¨ÏÑ±ÎêòÏñ¥ ÏûàÎäîÍ∞Ä'
  },
  [ScoringCriteria.COMPLETENESS]: { 
    label: 'ÏôÑÏÑ±ÎèÑ', 
    icon: '‚úÖ',
    description: 'ÌïÑÏöîÌïú Î™®Îì† Ï†ïÎ≥¥Î•º Ìè¨Ìï®ÌïòÎäîÍ∞Ä'
  },
  [ScoringCriteria.ACTIONABILITY]: { 
    label: 'Ïã§ÌñâÍ∞ÄÎä•ÏÑ±', 
    icon: '‚ö°',
    description: 'Ïã§Ï†ú Ïã§Ìñâ Í∞ÄÎä•Ìïú Íµ¨Ï≤¥Ï†ÅÏù∏ ÏßÄÏãúÎ•º Ìè¨Ìï®ÌïòÎäîÍ∞Ä'
  },
};

// Ï†êÏàòÏóê Îî∞Î•∏ ÏÉâÏÉÅ Í≤∞Ï†ï
const getScoreColor = (score: number): string => {
  if (score >= 0.8) return 'green';
  if (score >= 0.6) return 'blue';
  if (score >= 0.4) return 'orange';
  return 'red';
};

const ScoringCriteriaChart: React.FC<ScoringCriteriaChartProps> = memo(({ 
  criteriaScores,
  showDetails = true
}) => {
  const cardBg = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  
  // Progress BarÏôÄ ÌÖçÏä§Ìä∏ ÏÉâÏÉÅÎì§ ÎØ∏Î¶¨ Ï†ïÏùò (map ÏΩúÎ∞±ÏóêÏÑú ÏÇ¨Ïö©)
  const progressBg = useColorModeValue('gray.100', 'gray.700');
  const reasoningTextColor = useColorModeValue('gray.600', 'gray.400');
  const suggestionTitleColor = useColorModeValue('blue.600', 'blue.300');
  const suggestionTextColor = useColorModeValue('gray.600', 'gray.400');
  const suggestionBorderColor = useColorModeValue('blue.200', 'blue.600');
  
  // Ï†êÏàò ÌëúÏãú Í≥ÑÏÇ∞ Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò
  const displayScores = useMemo(() => 
    criteriaScores.map(score => ({
      ...score,
      percentage: Math.round(score.score * 100),
      confidencePercentage: Math.round(score.confidence * 100)
    }))
  , [criteriaScores]);

  return (
    <Box
      bg={cardBg}
      border="1px"
      borderColor={borderColor}
      borderRadius="xl"
      p={4}
      shadow="sm"
    >
      <Text fontSize="md" fontWeight="bold" mb={4} color={useColorModeValue('gray.700', 'gray.200')}>
        üìä ÏÑ∏Î∂Ä ÌèâÍ∞Ä Í∏∞Ï§Ä
      </Text>

      <VStack spacing={4} align="stretch">
        {displayScores.map((criterionScore) => {
          const config = CRITERIA_LABELS[criterionScore.criterion];
          const displayScore = criterionScore.percentage;
          const scoreColor = getScoreColor(criterionScore.score);
          
          return (
            <Box key={criterionScore.criterion}>
              <Flex justify="space-between" align="center" mb={2}>
                <HStack spacing={2}>
                  <Text fontSize="sm">{config.icon}</Text>
                  <Tooltip label={config.description} hasArrow>
                    <Text fontSize="sm" fontWeight="medium" cursor="help">
                      {config.label}
                    </Text>
                  </Tooltip>
                </HStack>
                
                <HStack spacing={2}>
                  <Badge 
                    colorScheme={scoreColor} 
                    variant="subtle"
                    fontSize="xs"
                    px={2}
                    py={0.5}
                    borderRadius="md"
                  >
                    {displayScore}Ï†ê
                  </Badge>
                  <Badge 
                    colorScheme="gray" 
                    variant="outline"
                    fontSize="xs"
                    px={2}
                    py={0.5}
                    borderRadius="md"
                  >
                    Ïã†Î¢∞ÎèÑ {criterionScore.confidencePercentage}%
                  </Badge>
                </HStack>
              </Flex>
              
              <Progress
                value={criterionScore.score * 100}
                colorScheme={scoreColor}
                borderRadius="full"
                size="sm"
                bg={progressBg}
              />
              
              {showDetails && criterionScore.reasoning && (
                <Text fontSize="xs" color={reasoningTextColor} mt={1}>
                  {criterionScore.reasoning}
                </Text>
              )}
              
              {showDetails && criterionScore.suggestions.length > 0 && (
                <Box mt={2}>
                  <Text fontSize="xs" fontWeight="medium" color={suggestionTitleColor}>
                    üí° Í∞úÏÑ† Ï†úÏïà:
                  </Text>
                  <VStack spacing={1} align="stretch" mt={1}>
                    {criterionScore.suggestions.map((suggestion, index) => (
                      <Text
                        key={index}
                        fontSize="xs"
                        color={suggestionTextColor}
                        pl={2}
                        borderLeft="2px"
                        borderColor={suggestionBorderColor}
                      >
                        {suggestion}
                      </Text>
                    ))}
                  </VStack>
                </Box>
              )}
            </Box>
          );
        })}
      </VStack>
    </Box>
  );
});

ScoringCriteriaChart.displayName = 'ScoringCriteriaChart';

export default ScoringCriteriaChart;
