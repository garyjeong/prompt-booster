# .github/workflows/deploy.yaml
name: Publish Docker image to ECR

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY: spark-prompt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: WhoAmI (AWS)
        run: |
          aws sts get-caller-identity

      - name: Determine ECR registry
        id: acct
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" --region "${{ env.AWS_REGION }}" >/dev/null 2>&1 || {
            aws ecr create-repository \
              --repository-name "${{ env.ECR_REPOSITORY }}" \
              --region "${{ env.AWS_REGION }}" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256; }

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Generate timestamp tag (ms)
        id: ts
        run: |
          echo "tag=ts-$(date +%s%3N)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.ts.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Update kubeconfig for EKS (assumed creds in env)
        run: |
          aws eks update-kubeconfig --name gary-cluster --region ${{ env.AWS_REGION }}

      - name: Sanity check EKS auth
        run: |
          kubectl version --short || true
          kubectl auth can-i get pods -A || true

      - name: Rollout new image to EKS
        run: |
          set -e
          DEPLOY="spark-prompt"
          NAMESPACE="gary-app"
          IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.ts.outputs.tag }}"
          kubectl -n "$NAMESPACE" set image deploy/$DEPLOY $DEPLOY=$IMAGE --record
          kubectl -n "$NAMESPACE" annotate deploy/$DEPLOY deploy.garyzone.pro/image-tag=${{ steps.ts.outputs.tag }} --overwrite
          kubectl -n "$NAMESPACE" rollout status deploy/$DEPLOY
